package bbc.gameoflifestub;

import java.util.ArrayList;

public class Life {

	private ArrayList<ArrayList<Cell>> cells;

	public Life(ArrayList<ArrayList<Cell>> initialCells)
    {
		this.cells = initialCells;
	}

    public ArrayList<ArrayList<Cell>> getCells()
    {
        return this.cells;
    }

    public Cell getCell(int x, int y) {
    	
    	return cells.get(x).get(y);
    }
    
    public Life gameOfLife() {
    	
    	Life life = new Life(cells);
    	
    	return life;
    }
    
    public int numberOfNeighboursForCell(Cell cell) {
    	
    	int numberOfNeighbours = 0;
    	int x = cell.getX();
    	int y = cell.getY();
    	
    	if (isNeighbourAlive(x - 1, y - 1)) {
    		numberOfNeighbours++;
    	}
    	
    	if (isNeighbourAlive(x, y - 1)) {
    		numberOfNeighbours++;
    	}
    	
    	if (isNeighbourAlive(x + 1, y - 1)) {
    		numberOfNeighbours++;
    	}
    	
    	if (isNeighbourAlive(x + 1, y)) {
    		numberOfNeighbours++;
    	}
    	
    	if (isNeighbourAlive(x + 1, y + 1)) {
    		numberOfNeighbours++;
    	}
    	
    	if (isNeighbourAlive(x, y + 1)) {
    		numberOfNeighbours++;
    	}
    	
    	if (isNeighbourAlive(x - 1, y + 1)) {
    		numberOfNeighbours++;
    	}
    	
    	if (isNeighbourAlive(x - 1, y)) {
    		numberOfNeighbours++;
    	}
    	
    	return numberOfNeighbours;
    }
    
    public boolean isNeighbourAlive(int x, int y) {
    	
    	boolean isAlive = false;
    	
    	if (x < cells.size() && x >= 0 && y < cells.get(0).size() && y >= 0) {
    		
    		isAlive = cells.get(x).get(y).isAlive();
    	}
    	
    	return isAlive;
    }
    
    public boolean cellShouldSurvive(int numNeighbours)
    {
    	if (numNeighbours == 2 || numNeighbours == 3) {
    		return true;
    	}
    	else {
    		return false;
    	}
    }
}
